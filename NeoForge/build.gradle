plugins {
    alias libs.plugins.moddevgradle
}

repositories {
    maven {
        name = "TheIllusiveC4"
        url = "https://maven.theillusivec4.top"
    }
}

dependencies {
    compileOnly project(":Common")

    implementation libs.resourcefulconfig.neoforge
    implementation libs.commonnetworking.neoforge

    implementation neoforge.curios

    implementation neoforge.caelus

    compileOnly libs.figura.neoforge
//    runtimeOnly libs.figura.neoforge

    compileOnly variantOf(libs.emi.neoforge) { classifier 'api' }
}

test {
    useJUnitPlatform()

    workingDir(project.file("run"))
}

neoForge {
    version = neoforge.versions.neoforge.get()

    parchment {
        minecraftVersion = libs.versions.parchment.minecraft.get()
        mappingsVersion = libs.versions.parchment.mappings.get()
    }

    mods {
        // define mod <-> source bindings
        // these are used to tell the game which sources are for which mod
        // mostly optional in a single mod project
        // but multi mod projects should define one per mod
        "${mod_id}" {
            sourceSet(project(":Common").sourceSets.main)
            sourceSet(sourceSets.main)
        }
    }

    unitTest {
        enable()

        testedMod = mods."${mod_id}"
        loadedMods.set([mods."${mod_id}"])
    }

    runs {
        configureEach {
            logLevel = org.slf4j.event.Level.DEBUG
            // Recommended logging data for a userdev environment
            // The markers can be added/remove as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            systemProperty 'forge.logging.markers', 'REGISTRIES'
            systemProperty 'sparkweave.debug', 'true'
            systemProperty 'mixin.debug', 'true'

            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id

            ideName = "NeoForge ${it.name.capitalize()} (${project.path})" // Unify the run config names with fabric
            gameDirectory = project.file('run')

            if (rootProject.hasProperty('mc_java_agent_path')) {
                jvmArgument("-javaagent:${rootProject.mc_java_agent_path}")
            }

            loadedMods.set([mods."${mod_id}"])
        }

        client {
            client()
            if (project.hasProperty('mc_uuid')) {
                programArguments.add("--uuid=${project.findProperty('mc_uuid')}")
            }

            if (project.hasProperty('mc_username')) {
                programArguments.add("--username=${project.findProperty('mc_username')}")
            }
        }

        server {
            server()
            programArguments.add('--nogui')
        }

        data {
            data()
            // this must be strings ONLY, or neogradle will not generate run configs at all!
            programArguments.addAll('--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').absolutePath, '--existing', file('src/main/resources/').absolutePath)
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

tasks.named("compileJava", JavaCompile) {
    source(project(":Common").sourceSets.main.allJava)
}

tasks.named("javadoc", Javadoc) {
    source(project(":Common").sourceSets.main.allSource)
}

tasks.named("sourcesJar", Jar) {
    from(project(":Common").sourceSets.main.allSource)
}

processResources {
    from project(":Common").sourceSets.main.resources
}
