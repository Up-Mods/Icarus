plugins {
    alias fabric.plugins.loom
}

dependencies {
    minecraft libs.minecraft
    mappings(loom.layered {
        it.officialMojangMappings()
        it.parchment("org.parchmentmc.data:parchment-${libs.versions.parchment.minecraft.get()}:${libs.versions.parchment.mappings.get()}@zip")
    })

    modImplementation fabric.fabric.loader
    modImplementation (fabric.fabric.api) {
        exclude group: "net.fabricmc", module: "fabric-loader"
    }

    compileOnly project(":Common")
    compileOnly libs.jetbrains.annotations

    modImplementation (libs.resourcefulconfig.fabric) {
        exclude group: "net.fabricmc", module: "fabric-loader"
    }
    modImplementation libs.commonnetworking.fabric

    modImplementation fabric.trinkets
    modImplementation fabric.bundles.cca

    modCompileOnly (fabric.modmenu) {
        transitive = false
    }
    modLocalRuntime (fabric.modmenu) {
        transitive = false
    }

    modCompileOnly libs.figura.fabric
//    modLocalRuntime libs.figura.fabric
//    localRuntime libs.bundles.figura.runtime

    modCompileOnly variantOf(libs.emi.fabric) { classifier 'api' }
}

loom {
    mods {
        "${mod_id}" {
            // Tell Loom about each source set used by your mod here. This ensures that your mod's classes are properly transformed by Loader.
            sourceSet("main")
        }
    }
    mixin {
        useLegacyMixinAp = false
    }

    runs {
        client {
            client()
            setConfigName("Fabric Client")
            ideConfigGenerated(true)
            runDir("run")

            if (rootProject.hasProperty('mc_uuid')) {
                programArgs("--uuid", rootProject.mc_uuid)
            }

            if (rootProject.hasProperty('mc_username')) {
                programArgs("--username", rootProject.mc_username)
            }

            if (rootProject.hasProperty('mc_java_agent_path')) {
                vmArg("-javaagent:${rootProject.mc_java_agent_path}")
            }
        }

        server {
            server()
            setConfigName("Fabric Server")
            ideConfigGenerated(true)
            runDir("run/server")
        }
    }
}

tasks.named("compileJava", JavaCompile) {
    source(project(":Common").sourceSets.main.allJava)
}

tasks.named("javadoc", Javadoc) {
    source(project(":Common").sourceSets.main.allJava)
}

tasks.named("sourcesJar", Jar) {
    from(project(":Common").sourceSets.main.allSource)
}

processResources {
    from project(":Common").sourceSets.main.resources
}
